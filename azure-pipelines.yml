# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

jobs:
- job: Build
  displayName: Build

  pool:
    vmImage: ubuntu-latest

  steps:
  - task: Gradle@3
    inputs:
      gradleWrapperFile: 'gradlew'
      tasks: 'build'
      publishJUnitResults: true
      testResultsFiles: '**/TEST-*.xml'
      javaHomeOption: 'JDKVersion'
      sonarQubeRunAnalysis: false
      spotBugsAnalysis: false
  - task: CopyFiles@2
    inputs:
      SourceFolder: '$(system.defaultworkingdirectory)'
      Contents: |
        **/*.war
        **/*.yml
      TargetFolder: $(build.artifactstagingdirectory)

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'drop'
      publishLocation: 'Container'

  - task: Docker@2
    inputs:
      containerRegistry: 'docker-service-connection'
      repository: 'naveen412/gradle'
      command: 'buildAndPush'
      Dockerfile: '**/Dockerfile'
      tags: 'test'

- job: Deploy
  displayName: Deploy
  steps:
  - task: Ansible@0
    inputs:
      ansibleInterface: 'remoteMachine'
      connectionOverSsh: 'ansible-service-connection'
      playbookSourceRemoteMachine: 'agentMachine'
      playbookRootRemoteMachine: '$(System.DefaultWorkingDirectory)/_gradle-Gradle-CI/drop'
      playbookPathLinkedArtifactOnRemoteMachine: 'ansible.yml'
      inventoriesRemoteMachine: 'noInventory'

